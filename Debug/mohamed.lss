
mohamed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002496  0000252a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800078  00800078  00002542  2**0
                  ALLOC
  3 .stab         00001a28  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000be9  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000934e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 10 	call	0x213a	; 0x213a <main>
      8a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ultrasonic_init>:
uint8_t rising_edge=0;
uint32_t timer_counter=0;
uint32_t distance;
uint8_t distance_str[10];

void ultrasonic_init(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

  TRIGER_DDR|=(1<<TRIGER);
     ca6:	a1 e3       	ldi	r26, 0x31	; 49
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	81 60       	ori	r24, 0x01	; 1
     cb2:	8c 93       	st	X, r24
  ECHO_DDR&=~(1<<ECHO);
     cb4:	a1 e3       	ldi	r26, 0x31	; 49
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e1 e3       	ldi	r30, 0x31	; 49
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	87 7f       	andi	r24, 0xF7	; 247
     cc0:	8c 93       	st	X, r24
  ECHO_PULLUP|=(1<<ECHO);
     cc2:	a2 e3       	ldi	r26, 0x32	; 50
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e2 e3       	ldi	r30, 0x32	; 50
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	8c 93       	st	X, r24
  enable_ex_interrupt();
     cd0:	0e 94 6f 06 	call	0xcde	; 0xcde <enable_ex_interrupt>
  timer0_init();
     cd4:	0e 94 cc 08 	call	0x1198	; 0x1198 <timer0_init>
  return;
}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <enable_ex_interrupt>:

void enable_ex_interrupt(void){
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62

  MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
     ce6:	a5 e5       	ldi	r26, 0x55	; 85
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e5 e5       	ldi	r30, 0x55	; 85
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	84 60       	ori	r24, 0x04	; 4
     cf2:	8c 93       	st	X, r24
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
     cf4:	ab e5       	ldi	r26, 0x5B	; 91
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	eb e5       	ldi	r30, 0x5B	; 91
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	8c 93       	st	X, r24

  return;
}
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <ultra_triger>:

void ultra_triger(void){
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	68 97       	sbiw	r28, 0x18	; 24
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
  if(!sensor_working){
     d1c:	80 91 78 00 	lds	r24, 0x0078
     d20:	88 23       	and	r24, r24
     d22:	09 f0       	breq	.+2      	; 0xd26 <ultra_triger+0x1e>
     d24:	cf c0       	rjmp	.+414    	; 0xec4 <ultra_triger+0x1bc>
    TRIGER_PORT|=(1<<TRIGER);
     d26:	a2 e3       	ldi	r26, 0x32	; 50
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e2 e3       	ldi	r30, 0x32	; 50
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	8c 93       	st	X, r24
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e7       	ldi	r26, 0x70	; 112
     d3a:	b1 e4       	ldi	r27, 0x41	; 65
     d3c:	8d 8b       	std	Y+21, r24	; 0x15
     d3e:	9e 8b       	std	Y+22, r25	; 0x16
     d40:	af 8b       	std	Y+23, r26	; 0x17
     d42:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d44:	6d 89       	ldd	r22, Y+21	; 0x15
     d46:	7e 89       	ldd	r23, Y+22	; 0x16
     d48:	8f 89       	ldd	r24, Y+23	; 0x17
     d4a:	98 8d       	ldd	r25, Y+24	; 0x18
     d4c:	2b ea       	ldi	r18, 0xAB	; 171
     d4e:	3a ea       	ldi	r19, 0xAA	; 170
     d50:	4a e2       	ldi	r20, 0x2A	; 42
     d52:	50 e4       	ldi	r21, 0x40	; 64
     d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	89 8b       	std	Y+17, r24	; 0x11
     d5e:	9a 8b       	std	Y+18, r25	; 0x12
     d60:	ab 8b       	std	Y+19, r26	; 0x13
     d62:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d64:	69 89       	ldd	r22, Y+17	; 0x11
     d66:	7a 89       	ldd	r23, Y+18	; 0x12
     d68:	8b 89       	ldd	r24, Y+19	; 0x13
     d6a:	9c 89       	ldd	r25, Y+20	; 0x14
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d78:	88 23       	and	r24, r24
     d7a:	1c f4       	brge	.+6      	; 0xd82 <ultra_triger+0x7a>
		__ticks = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	88 8b       	std	Y+16, r24	; 0x10
     d80:	91 c0       	rjmp	.+290    	; 0xea4 <ultra_triger+0x19c>
	else if (__tmp > 255)
     d82:	69 89       	ldd	r22, Y+17	; 0x11
     d84:	7a 89       	ldd	r23, Y+18	; 0x12
     d86:	8b 89       	ldd	r24, Y+19	; 0x13
     d88:	9c 89       	ldd	r25, Y+20	; 0x14
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	4f e7       	ldi	r20, 0x7F	; 127
     d90:	53 e4       	ldi	r21, 0x43	; 67
     d92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d96:	18 16       	cp	r1, r24
     d98:	0c f0       	brlt	.+2      	; 0xd9c <ultra_triger+0x94>
     d9a:	7b c0       	rjmp	.+246    	; 0xe92 <ultra_triger+0x18a>
	{
		_delay_ms(__us / 1000.0);
     d9c:	6d 89       	ldd	r22, Y+21	; 0x15
     d9e:	7e 89       	ldd	r23, Y+22	; 0x16
     da0:	8f 89       	ldd	r24, Y+23	; 0x17
     da2:	98 8d       	ldd	r25, Y+24	; 0x18
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a e7       	ldi	r20, 0x7A	; 122
     daa:	54 e4       	ldi	r21, 0x44	; 68
     dac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	8c 87       	std	Y+12, r24	; 0x0c
     db6:	9d 87       	std	Y+13, r25	; 0x0d
     db8:	ae 87       	std	Y+14, r26	; 0x0e
     dba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbc:	6c 85       	ldd	r22, Y+12	; 0x0c
     dbe:	7d 85       	ldd	r23, Y+13	; 0x0d
     dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc2:	9f 85       	ldd	r25, Y+15	; 0x0f
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	4a ef       	ldi	r20, 0xFA	; 250
     dca:	54 e4       	ldi	r21, 0x44	; 68
     dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	88 87       	std	Y+8, r24	; 0x08
     dd6:	99 87       	std	Y+9, r25	; 0x09
     dd8:	aa 87       	std	Y+10, r26	; 0x0a
     dda:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     ddc:	68 85       	ldd	r22, Y+8	; 0x08
     dde:	79 85       	ldd	r23, Y+9	; 0x09
     de0:	8a 85       	ldd	r24, Y+10	; 0x0a
     de2:	9b 85       	ldd	r25, Y+11	; 0x0b
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	2c f4       	brge	.+10     	; 0xdfe <ultra_triger+0xf6>
		__ticks = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9f 83       	std	Y+7, r25	; 0x07
     dfa:	8e 83       	std	Y+6, r24	; 0x06
     dfc:	3f c0       	rjmp	.+126    	; 0xe7c <ultra_triger+0x174>
	else if (__tmp > 65535)
     dfe:	68 85       	ldd	r22, Y+8	; 0x08
     e00:	79 85       	ldd	r23, Y+9	; 0x09
     e02:	8a 85       	ldd	r24, Y+10	; 0x0a
     e04:	9b 85       	ldd	r25, Y+11	; 0x0b
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	3f ef       	ldi	r19, 0xFF	; 255
     e0a:	4f e7       	ldi	r20, 0x7F	; 127
     e0c:	57 e4       	ldi	r21, 0x47	; 71
     e0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e12:	18 16       	cp	r1, r24
     e14:	4c f5       	brge	.+82     	; 0xe68 <ultra_triger+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e16:	6c 85       	ldd	r22, Y+12	; 0x0c
     e18:	7d 85       	ldd	r23, Y+13	; 0x0d
     e1a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e1c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e2       	ldi	r20, 0x20	; 32
     e24:	51 e4       	ldi	r21, 0x41	; 65
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	9f 83       	std	Y+7, r25	; 0x07
     e3c:	8e 83       	std	Y+6, r24	; 0x06
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <ultra_triger+0x156>
     e40:	88 ec       	ldi	r24, 0xC8	; 200
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	9d 83       	std	Y+5, r25	; 0x05
     e46:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <ultra_triger+0x144>
     e50:	9d 83       	std	Y+5, r25	; 0x05
     e52:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	9f 83       	std	Y+7, r25	; 0x07
     e5c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5e:	8e 81       	ldd	r24, Y+6	; 0x06
     e60:	9f 81       	ldd	r25, Y+7	; 0x07
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	69 f7       	brne	.-38     	; 0xe40 <ultra_triger+0x138>
     e66:	24 c0       	rjmp	.+72     	; 0xeb0 <ultra_triger+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e68:	68 85       	ldd	r22, Y+8	; 0x08
     e6a:	79 85       	ldd	r23, Y+9	; 0x09
     e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9f 83       	std	Y+7, r25	; 0x07
     e7a:	8e 83       	std	Y+6, r24	; 0x06
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	9b 83       	std	Y+3, r25	; 0x03
     e82:	8a 83       	std	Y+2, r24	; 0x02
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	9b 81       	ldd	r25, Y+3	; 0x03
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <ultra_triger+0x180>
     e8c:	9b 83       	std	Y+3, r25	; 0x03
     e8e:	8a 83       	std	Y+2, r24	; 0x02
     e90:	0f c0       	rjmp	.+30     	; 0xeb0 <ultra_triger+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e92:	69 89       	ldd	r22, Y+17	; 0x11
     e94:	7a 89       	ldd	r23, Y+18	; 0x12
     e96:	8b 89       	ldd	r24, Y+19	; 0x13
     e98:	9c 89       	ldd	r25, Y+20	; 0x14
     e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	88 8b       	std	Y+16, r24	; 0x10
     ea4:	88 89       	ldd	r24, Y+16	; 0x10
     ea6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	8a 95       	dec	r24
     eac:	f1 f7       	brne	.-4      	; 0xeaa <ultra_triger+0x1a2>
     eae:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);
    TRIGER_PORT&=~(1<<TRIGER);
     eb0:	a2 e3       	ldi	r26, 0x32	; 50
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e2 e3       	ldi	r30, 0x32	; 50
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8e 7f       	andi	r24, 0xFE	; 254
     ebc:	8c 93       	st	X, r24
    sensor_working=1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 78 00 	sts	0x0078, r24
  }
}
     ec4:	68 96       	adiw	r28, 0x18	; 24
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <__vector_2>:

ISR(INT1_vect){
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	2e 97       	sbiw	r28, 0x0e	; 14
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	cd bf       	out	0x3d, r28	; 61
  if(sensor_working==1){
     f06:	80 91 78 00 	lds	r24, 0x0078
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <__vector_2+0x3a>
     f0e:	de c0       	rjmp	.+444    	; 0x10cc <__vector_2+0x1f6>
    if(rising_edge==0){
     f10:	80 91 79 00 	lds	r24, 0x0079
     f14:	88 23       	and	r24, r24
     f16:	79 f4       	brne	.+30     	; 0xf36 <__vector_2+0x60>
      TCNT0=0x00;
     f18:	e2 e5       	ldi	r30, 0x52	; 82
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	10 82       	st	Z, r1
      rising_edge=1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 79 00 	sts	0x0079, r24
      timer_counter=0;
     f24:	10 92 7a 00 	sts	0x007A, r1
     f28:	10 92 7b 00 	sts	0x007B, r1
     f2c:	10 92 7c 00 	sts	0x007C, r1
     f30:	10 92 7d 00 	sts	0x007D, r1
     f34:	cb c0       	rjmp	.+406    	; 0x10cc <__vector_2+0x1f6>
    }
  else{
    distance=(timer_counter*256+TCNT0)/466;
     f36:	80 91 7a 00 	lds	r24, 0x007A
     f3a:	90 91 7b 00 	lds	r25, 0x007B
     f3e:	a0 91 7c 00 	lds	r26, 0x007C
     f42:	b0 91 7d 00 	lds	r27, 0x007D
     f46:	22 27       	eor	r18, r18
     f48:	38 2f       	mov	r19, r24
     f4a:	49 2f       	mov	r20, r25
     f4c:	5a 2f       	mov	r21, r26
     f4e:	e2 e5       	ldi	r30, 0x52	; 82
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	a4 1f       	adc	r26, r20
     f62:	b5 1f       	adc	r27, r21
     f64:	22 ed       	ldi	r18, 0xD2	; 210
     f66:	31 e0       	ldi	r19, 0x01	; 1
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
     f74:	da 01       	movw	r26, r20
     f76:	c9 01       	movw	r24, r18
     f78:	80 93 7e 00 	sts	0x007E, r24
     f7c:	90 93 7f 00 	sts	0x007F, r25
     f80:	a0 93 80 00 	sts	0x0080, r26
     f84:	b0 93 81 00 	sts	0x0081, r27
    lcd_goto_xy(1,0);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <lcd_goto_xy>
  	itoa(distance,distance_str,10);
     f94:	80 91 7e 00 	lds	r24, 0x007E
     f98:	90 91 7f 00 	lds	r25, 0x007F
     f9c:	a0 91 80 00 	lds	r26, 0x0080
     fa0:	b0 91 81 00 	lds	r27, 0x0081
     fa4:	22 e8       	ldi	r18, 0x82	; 130
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	b9 01       	movw	r22, r18
     faa:	4a e0       	ldi	r20, 0x0A	; 10
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	0e 94 04 12 	call	0x2408	; 0x2408 <itoa>
  	strcat(distance_str, "cm");
     fb2:	82 e8       	ldi	r24, 0x82	; 130
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <strlen>
     fba:	8e 57       	subi	r24, 0x7E	; 126
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	20 e6       	ldi	r18, 0x60	; 96
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	b9 01       	movw	r22, r18
     fc4:	43 e0       	ldi	r20, 0x03	; 3
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <memcpy>
  	lcd_write_word(distance_str);
     fcc:	82 e8       	ldi	r24, 0x82	; 130
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <lcd_write_word>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	aa e7       	ldi	r26, 0x7A	; 122
     fda:	b3 e4       	ldi	r27, 0x43	; 67
     fdc:	8b 87       	std	Y+11, r24	; 0x0b
     fde:	9c 87       	std	Y+12, r25	; 0x0c
     fe0:	ad 87       	std	Y+13, r26	; 0x0d
     fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8f 83       	std	Y+7, r24	; 0x07
     ffe:	98 87       	std	Y+8, r25	; 0x08
    1000:	a9 87       	std	Y+9, r26	; 0x09
    1002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <__vector_2+0x150>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9e 83       	std	Y+6, r25	; 0x06
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <__vector_2+0x1ce>
	else if (__tmp > 65535)
    1026:	6f 81       	ldd	r22, Y+7	; 0x07
    1028:	78 85       	ldd	r23, Y+8	; 0x08
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <__vector_2+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <__vector_2+0x1b0>
    1068:	88 ec       	ldi	r24, 0xC8	; 200
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <__vector_2+0x19e>
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <__vector_2+0x192>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <__vector_2+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	6f 81       	ldd	r22, Y+7	; 0x07
    1092:	78 85       	ldd	r23, Y+8	; 0x08
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <__vector_2+0x1da>
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
  	_delay_ms(250);
    timer_counter=0;
    10b8:	10 92 7a 00 	sts	0x007A, r1
    10bc:	10 92 7b 00 	sts	0x007B, r1
    10c0:	10 92 7c 00 	sts	0x007C, r1
    10c4:	10 92 7d 00 	sts	0x007D, r1
    rising_edge=0;
    10c8:	10 92 79 00 	sts	0x0079, r1
  }
}}
    10cc:	2e 96       	adiw	r28, 0x0e	; 14
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <__vector_11>:

ISR(TIMER0_OVF_vect){
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	2f 93       	push	r18
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	ef 93       	push	r30
    110e:	ff 93       	push	r31
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    timer_counter++;
    1118:	80 91 7a 00 	lds	r24, 0x007A
    111c:	90 91 7b 00 	lds	r25, 0x007B
    1120:	a0 91 7c 00 	lds	r26, 0x007C
    1124:	b0 91 7d 00 	lds	r27, 0x007D
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	a1 1d       	adc	r26, r1
    112c:	b1 1d       	adc	r27, r1
    112e:	80 93 7a 00 	sts	0x007A, r24
    1132:	90 93 7b 00 	sts	0x007B, r25
    1136:	a0 93 7c 00 	sts	0x007C, r26
    113a:	b0 93 7d 00 	sts	0x007D, r27
    if(timer_counter >730){
    113e:	80 91 7a 00 	lds	r24, 0x007A
    1142:	90 91 7b 00 	lds	r25, 0x007B
    1146:	a0 91 7c 00 	lds	r26, 0x007C
    114a:	b0 91 7d 00 	lds	r27, 0x007D
    114e:	8b 3d       	cpi	r24, 0xDB	; 219
    1150:	22 e0       	ldi	r18, 0x02	; 2
    1152:	92 07       	cpc	r25, r18
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	a2 07       	cpc	r26, r18
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	b2 07       	cpc	r27, r18
    115c:	78 f0       	brcs	.+30     	; 0x117c <__vector_11+0x84>
      TCNT0=0x00;
    115e:	e2 e5       	ldi	r30, 0x52	; 82
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	10 82       	st	Z, r1
      sensor_working=0;
    1164:	10 92 78 00 	sts	0x0078, r1
      rising_edge=0;
    1168:	10 92 79 00 	sts	0x0079, r1
      timer_counter=0;
    116c:	10 92 7a 00 	sts	0x007A, r1
    1170:	10 92 7b 00 	sts	0x007B, r1
    1174:	10 92 7c 00 	sts	0x007C, r1
    1178:	10 92 7d 00 	sts	0x007D, r1
    }
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <timer0_init>:

//timer0


void timer0_init(void)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	10 82       	st	Z, r1
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
    11a6:	e3 e5       	ldi	r30, 0x53	; 83
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 83       	st	Z, r24
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
    11ae:	e2 e5       	ldi	r30, 0x52	; 82
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	10 82       	st	Z, r1
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
    11b4:	a9 e5       	ldi	r26, 0x59	; 89
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e9 e5       	ldi	r30, 0x59	; 89
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	8c 93       	st	X, r24

	return;
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <lcd_init>:
*purpose       	: initialize LCD pins as output
*				 		and seting up the operation mode(4-bit)
*						default setting (cursor on)
*/
void lcd_init(void)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	e8 97       	sbiw	r28, 0x38	; 56
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61

	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
    11dc:	ea e3       	ldi	r30, 0x3A	; 58
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 ef       	ldi	r24, 0xF0	; 240
    11e2:	80 83       	st	Z, r24
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
    11e4:	a7 e3       	ldi	r26, 0x37	; 55
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e7 e3       	ldi	r30, 0x37	; 55
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8e 60       	ori	r24, 0x0E	; 14
    11f0:	8c 93       	st	X, r24

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
    11f2:	eb e3       	ldi	r30, 0x3B	; 59
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 e2       	ldi	r24, 0x20	; 32
    11f8:	80 83       	st	Z, r24
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
    11fa:	a8 e3       	ldi	r26, 0x38	; 56
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	88 60       	ori	r24, 0x08	; 8
    1206:	8c 93       	st	X, r24
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a0 ea       	ldi	r26, 0xA0	; 160
    120e:	b0 e4       	ldi	r27, 0x40	; 64
    1210:	8d ab       	std	Y+53, r24	; 0x35
    1212:	9e ab       	std	Y+54, r25	; 0x36
    1214:	af ab       	std	Y+55, r26	; 0x37
    1216:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1218:	6d a9       	ldd	r22, Y+53	; 0x35
    121a:	7e a9       	ldd	r23, Y+54	; 0x36
    121c:	8f a9       	ldd	r24, Y+55	; 0x37
    121e:	98 ad       	ldd	r25, Y+56	; 0x38
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4a ef       	ldi	r20, 0xFA	; 250
    1226:	54 e4       	ldi	r21, 0x44	; 68
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	89 ab       	std	Y+49, r24	; 0x31
    1232:	9a ab       	std	Y+50, r25	; 0x32
    1234:	ab ab       	std	Y+51, r26	; 0x33
    1236:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1238:	69 a9       	ldd	r22, Y+49	; 0x31
    123a:	7a a9       	ldd	r23, Y+50	; 0x32
    123c:	8b a9       	ldd	r24, Y+51	; 0x33
    123e:	9c a9       	ldd	r25, Y+52	; 0x34
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e8       	ldi	r20, 0x80	; 128
    1246:	5f e3       	ldi	r21, 0x3F	; 63
    1248:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    124c:	88 23       	and	r24, r24
    124e:	2c f4       	brge	.+10     	; 0x125a <lcd_init+0x92>
		__ticks = 1;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	98 ab       	std	Y+48, r25	; 0x30
    1256:	8f a7       	std	Y+47, r24	; 0x2f
    1258:	3f c0       	rjmp	.+126    	; 0x12d8 <lcd_init+0x110>
	else if (__tmp > 65535)
    125a:	69 a9       	ldd	r22, Y+49	; 0x31
    125c:	7a a9       	ldd	r23, Y+50	; 0x32
    125e:	8b a9       	ldd	r24, Y+51	; 0x33
    1260:	9c a9       	ldd	r25, Y+52	; 0x34
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	3f ef       	ldi	r19, 0xFF	; 255
    1266:	4f e7       	ldi	r20, 0x7F	; 127
    1268:	57 e4       	ldi	r21, 0x47	; 71
    126a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    126e:	18 16       	cp	r1, r24
    1270:	4c f5       	brge	.+82     	; 0x12c4 <lcd_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1272:	6d a9       	ldd	r22, Y+53	; 0x35
    1274:	7e a9       	ldd	r23, Y+54	; 0x36
    1276:	8f a9       	ldd	r24, Y+55	; 0x37
    1278:	98 ad       	ldd	r25, Y+56	; 0x38
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e2       	ldi	r20, 0x20	; 32
    1280:	51 e4       	ldi	r21, 0x41	; 65
    1282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	bc 01       	movw	r22, r24
    128c:	cd 01       	movw	r24, r26
    128e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	98 ab       	std	Y+48, r25	; 0x30
    1298:	8f a7       	std	Y+47, r24	; 0x2f
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <lcd_init+0xf2>
    129c:	88 ec       	ldi	r24, 0xC8	; 200
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9e a7       	std	Y+46, r25	; 0x2e
    12a2:	8d a7       	std	Y+45, r24	; 0x2d
    12a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    12a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <lcd_init+0xe0>
    12ac:	9e a7       	std	Y+46, r25	; 0x2e
    12ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b2:	98 a9       	ldd	r25, Y+48	; 0x30
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	98 ab       	std	Y+48, r25	; 0x30
    12b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    12bc:	98 a9       	ldd	r25, Y+48	; 0x30
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	69 f7       	brne	.-38     	; 0x129c <lcd_init+0xd4>
    12c2:	14 c0       	rjmp	.+40     	; 0x12ec <lcd_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c4:	69 a9       	ldd	r22, Y+49	; 0x31
    12c6:	7a a9       	ldd	r23, Y+50	; 0x32
    12c8:	8b a9       	ldd	r24, Y+51	; 0x33
    12ca:	9c a9       	ldd	r25, Y+52	; 0x34
    12cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	98 ab       	std	Y+48, r25	; 0x30
    12d6:	8f a7       	std	Y+47, r24	; 0x2f
    12d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12da:	98 a9       	ldd	r25, Y+48	; 0x30
    12dc:	9c a7       	std	Y+44, r25	; 0x2c
    12de:	8b a7       	std	Y+43, r24	; 0x2b
    12e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <lcd_init+0x11c>
    12e8:	9c a7       	std	Y+44, r25	; 0x2c
    12ea:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    12ec:	a8 e3       	ldi	r26, 0x38	; 56
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e8 e3       	ldi	r30, 0x38	; 56
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	87 7f       	andi	r24, 0xF7	; 247
    12f8:	8c 93       	st	X, r24
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 ea       	ldi	r26, 0xA0	; 160
    1300:	b0 e4       	ldi	r27, 0x40	; 64
    1302:	8f a3       	std	Y+39, r24	; 0x27
    1304:	98 a7       	std	Y+40, r25	; 0x28
    1306:	a9 a7       	std	Y+41, r26	; 0x29
    1308:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130a:	6f a1       	ldd	r22, Y+39	; 0x27
    130c:	78 a5       	ldd	r23, Y+40	; 0x28
    130e:	89 a5       	ldd	r24, Y+41	; 0x29
    1310:	9a a5       	ldd	r25, Y+42	; 0x2a
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	4a ef       	ldi	r20, 0xFA	; 250
    1318:	54 e4       	ldi	r21, 0x44	; 68
    131a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	8b a3       	std	Y+35, r24	; 0x23
    1324:	9c a3       	std	Y+36, r25	; 0x24
    1326:	ad a3       	std	Y+37, r26	; 0x25
    1328:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    132a:	6b a1       	ldd	r22, Y+35	; 0x23
    132c:	7c a1       	ldd	r23, Y+36	; 0x24
    132e:	8d a1       	ldd	r24, Y+37	; 0x25
    1330:	9e a1       	ldd	r25, Y+38	; 0x26
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e8       	ldi	r20, 0x80	; 128
    1338:	5f e3       	ldi	r21, 0x3F	; 63
    133a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    133e:	88 23       	and	r24, r24
    1340:	2c f4       	brge	.+10     	; 0x134c <lcd_init+0x184>
		__ticks = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9a a3       	std	Y+34, r25	; 0x22
    1348:	89 a3       	std	Y+33, r24	; 0x21
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <lcd_init+0x202>
	else if (__tmp > 65535)
    134c:	6b a1       	ldd	r22, Y+35	; 0x23
    134e:	7c a1       	ldd	r23, Y+36	; 0x24
    1350:	8d a1       	ldd	r24, Y+37	; 0x25
    1352:	9e a1       	ldd	r25, Y+38	; 0x26
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	57 e4       	ldi	r21, 0x47	; 71
    135c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1360:	18 16       	cp	r1, r24
    1362:	4c f5       	brge	.+82     	; 0x13b6 <lcd_init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1364:	6f a1       	ldd	r22, Y+39	; 0x27
    1366:	78 a5       	ldd	r23, Y+40	; 0x28
    1368:	89 a5       	ldd	r24, Y+41	; 0x29
    136a:	9a a5       	ldd	r25, Y+42	; 0x2a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e2       	ldi	r20, 0x20	; 32
    1372:	51 e4       	ldi	r21, 0x41	; 65
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9a a3       	std	Y+34, r25	; 0x22
    138a:	89 a3       	std	Y+33, r24	; 0x21
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <lcd_init+0x1e4>
    138e:	88 ec       	ldi	r24, 0xC8	; 200
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	98 a3       	std	Y+32, r25	; 0x20
    1394:	8f 8f       	std	Y+31, r24	; 0x1f
    1396:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1398:	98 a1       	ldd	r25, Y+32	; 0x20
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <lcd_init+0x1d2>
    139e:	98 a3       	std	Y+32, r25	; 0x20
    13a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a2:	89 a1       	ldd	r24, Y+33	; 0x21
    13a4:	9a a1       	ldd	r25, Y+34	; 0x22
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9a a3       	std	Y+34, r25	; 0x22
    13aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ac:	89 a1       	ldd	r24, Y+33	; 0x21
    13ae:	9a a1       	ldd	r25, Y+34	; 0x22
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	69 f7       	brne	.-38     	; 0x138e <lcd_init+0x1c6>
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <lcd_init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b6:	6b a1       	ldd	r22, Y+35	; 0x23
    13b8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ba:	8d a1       	ldd	r24, Y+37	; 0x25
    13bc:	9e a1       	ldd	r25, Y+38	; 0x26
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9a a3       	std	Y+34, r25	; 0x22
    13c8:	89 a3       	std	Y+33, r24	; 0x21
    13ca:	89 a1       	ldd	r24, Y+33	; 0x21
    13cc:	9a a1       	ldd	r25, Y+34	; 0x22
    13ce:	9e 8f       	std	Y+30, r25	; 0x1e
    13d0:	8d 8f       	std	Y+29, r24	; 0x1d
    13d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <lcd_init+0x20e>
    13da:	9e 8f       	std	Y+30, r25	; 0x1e
    13dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
    13de:	88 e2       	ldi	r24, 0x28	; 40
    13e0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <lcd_send_command>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 ea       	ldi	r26, 0xA0	; 160
    13ea:	b0 e4       	ldi	r27, 0x40	; 64
    13ec:	89 8f       	std	Y+25, r24	; 0x19
    13ee:	9a 8f       	std	Y+26, r25	; 0x1a
    13f0:	ab 8f       	std	Y+27, r26	; 0x1b
    13f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	69 8d       	ldd	r22, Y+25	; 0x19
    13f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8d 8b       	std	Y+21, r24	; 0x15
    140e:	9e 8b       	std	Y+22, r25	; 0x16
    1410:	af 8b       	std	Y+23, r26	; 0x17
    1412:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <lcd_init+0x26e>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 8b       	std	Y+20, r25	; 0x14
    1432:	8b 8b       	std	Y+19, r24	; 0x13
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <lcd_init+0x2ec>
	else if (__tmp > 65535)
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <lcd_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	69 8d       	ldd	r22, Y+25	; 0x19
    1450:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c 8b       	std	Y+20, r25	; 0x14
    1474:	8b 8b       	std	Y+19, r24	; 0x13
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <lcd_init+0x2ce>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9a 8b       	std	Y+18, r25	; 0x12
    147e:	89 8b       	std	Y+17, r24	; 0x11
    1480:	89 89       	ldd	r24, Y+17	; 0x11
    1482:	9a 89       	ldd	r25, Y+18	; 0x12
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <lcd_init+0x2bc>
    1488:	9a 8b       	std	Y+18, r25	; 0x12
    148a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8b 89       	ldd	r24, Y+19	; 0x13
    148e:	9c 89       	ldd	r25, Y+20	; 0x14
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8b 89       	ldd	r24, Y+19	; 0x13
    1498:	9c 89       	ldd	r25, Y+20	; 0x14
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <lcd_init+0x2b0>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <lcd_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6d 89       	ldd	r22, Y+21	; 0x15
    14a2:	7e 89       	ldd	r23, Y+22	; 0x16
    14a4:	8f 89       	ldd	r24, Y+23	; 0x17
    14a6:	98 8d       	ldd	r25, Y+24	; 0x18
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	8b 89       	ldd	r24, Y+19	; 0x13
    14b6:	9c 89       	ldd	r25, Y+20	; 0x14
    14b8:	98 8b       	std	Y+16, r25	; 0x10
    14ba:	8f 87       	std	Y+15, r24	; 0x0f
    14bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14be:	98 89       	ldd	r25, Y+16	; 0x10
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <lcd_init+0x2f8>
    14c4:	98 8b       	std	Y+16, r25	; 0x10
    14c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
    14c8:	8f e0       	ldi	r24, 0x0F	; 15
    14ca:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <lcd_send_command>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 ea       	ldi	r26, 0xA0	; 160
    14d4:	b0 e4       	ldi	r27, 0x40	; 64
    14d6:	8b 87       	std	Y+11, r24	; 0x0b
    14d8:	9c 87       	std	Y+12, r25	; 0x0c
    14da:	ad 87       	std	Y+13, r26	; 0x0d
    14dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a ef       	ldi	r20, 0xFA	; 250
    14ec:	54 e4       	ldi	r21, 0x44	; 68
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8f 83       	std	Y+7, r24	; 0x07
    14f8:	98 87       	std	Y+8, r25	; 0x08
    14fa:	a9 87       	std	Y+9, r26	; 0x09
    14fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <lcd_init+0x358>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	3f c0       	rjmp	.+126    	; 0x159e <lcd_init+0x3d6>
	else if (__tmp > 65535)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <lcd_init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <lcd_init+0x3b8>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	8b 83       	std	Y+3, r24	; 0x03
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <lcd_init+0x3a6>
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <lcd_init+0x39a>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <lcd_init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <lcd_init+0x3e2>
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	lcd_send_command(0x80);
    15b2:	80 e8       	ldi	r24, 0x80	; 128
    15b4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <lcd_send_command>

}
    15b8:	e8 96       	adiw	r28, 0x38	; 56
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <lcd_send_command>:
*purpose       	: sending a command to LCD by sending
*				 		the first nibble then the second nibble
*						enabling and disabling the LCD in between
*/
void lcd_send_command (uint8_t command)
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	e9 97       	sbiw	r28, 0x39	; 57
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	89 af       	std	Y+57, r24	; 0x39
	DATA_BUS=((command&0b11110000));
    15e0:	eb e3       	ldi	r30, 0x3B	; 59
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	89 ad       	ldd	r24, Y+57	; 0x39
    15e6:	80 7f       	andi	r24, 0xF0	; 240
    15e8:	80 83       	st	Z, r24
	CTL_BUS &=~(1<<LCD_RS);
    15ea:	a8 e3       	ldi	r26, 0x38	; 56
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8d 7f       	andi	r24, 0xFD	; 253
    15f6:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    15f8:	a8 e3       	ldi	r26, 0x38	; 56
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e3       	ldi	r30, 0x38	; 56
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	8c 93       	st	X, r24
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 ea       	ldi	r26, 0xA0	; 160
    160c:	b0 e4       	ldi	r27, 0x40	; 64
    160e:	8d ab       	std	Y+53, r24	; 0x35
    1610:	9e ab       	std	Y+54, r25	; 0x36
    1612:	af ab       	std	Y+55, r26	; 0x37
    1614:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	6d a9       	ldd	r22, Y+53	; 0x35
    1618:	7e a9       	ldd	r23, Y+54	; 0x36
    161a:	8f a9       	ldd	r24, Y+55	; 0x37
    161c:	98 ad       	ldd	r25, Y+56	; 0x38
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	4a ef       	ldi	r20, 0xFA	; 250
    1624:	54 e4       	ldi	r21, 0x44	; 68
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	89 ab       	std	Y+49, r24	; 0x31
    1630:	9a ab       	std	Y+50, r25	; 0x32
    1632:	ab ab       	std	Y+51, r26	; 0x33
    1634:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1636:	69 a9       	ldd	r22, Y+49	; 0x31
    1638:	7a a9       	ldd	r23, Y+50	; 0x32
    163a:	8b a9       	ldd	r24, Y+51	; 0x33
    163c:	9c a9       	ldd	r25, Y+52	; 0x34
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <lcd_send_command+0x8e>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <lcd_send_command+0x10c>
	else if (__tmp > 65535)
    1658:	69 a9       	ldd	r22, Y+49	; 0x31
    165a:	7a a9       	ldd	r23, Y+50	; 0x32
    165c:	8b a9       	ldd	r24, Y+51	; 0x33
    165e:	9c a9       	ldd	r25, Y+52	; 0x34
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    166c:	18 16       	cp	r1, r24
    166e:	4c f5       	brge	.+82     	; 0x16c2 <lcd_send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	6d a9       	ldd	r22, Y+53	; 0x35
    1672:	7e a9       	ldd	r23, Y+54	; 0x36
    1674:	8f a9       	ldd	r24, Y+55	; 0x37
    1676:	98 ad       	ldd	r25, Y+56	; 0x38
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	98 ab       	std	Y+48, r25	; 0x30
    1696:	8f a7       	std	Y+47, r24	; 0x2f
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <lcd_send_command+0xee>
    169a:	88 ec       	ldi	r24, 0xC8	; 200
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9e a7       	std	Y+46, r25	; 0x2e
    16a0:	8d a7       	std	Y+45, r24	; 0x2d
    16a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <lcd_send_command+0xdc>
    16aa:	9e a7       	std	Y+46, r25	; 0x2e
    16ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b0:	98 a9       	ldd	r25, Y+48	; 0x30
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	98 ab       	std	Y+48, r25	; 0x30
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	98 a9       	ldd	r25, Y+48	; 0x30
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <lcd_send_command+0xd0>
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <lcd_send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	69 a9       	ldd	r22, Y+49	; 0x31
    16c4:	7a a9       	ldd	r23, Y+50	; 0x32
    16c6:	8b a9       	ldd	r24, Y+51	; 0x33
    16c8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	98 ab       	std	Y+48, r25	; 0x30
    16d4:	8f a7       	std	Y+47, r24	; 0x2f
    16d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d8:	98 a9       	ldd	r25, Y+48	; 0x30
    16da:	9c a7       	std	Y+44, r25	; 0x2c
    16dc:	8b a7       	std	Y+43, r24	; 0x2b
    16de:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <lcd_send_command+0x118>
    16e6:	9c a7       	std	Y+44, r25	; 0x2c
    16e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	87 7f       	andi	r24, 0xF7	; 247
    16f6:	8c 93       	st	X, r24
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 ea       	ldi	r26, 0xA0	; 160
    16fe:	b0 e4       	ldi	r27, 0x40	; 64
    1700:	8f a3       	std	Y+39, r24	; 0x27
    1702:	98 a7       	std	Y+40, r25	; 0x28
    1704:	a9 a7       	std	Y+41, r26	; 0x29
    1706:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6f a1       	ldd	r22, Y+39	; 0x27
    170a:	78 a5       	ldd	r23, Y+40	; 0x28
    170c:	89 a5       	ldd	r24, Y+41	; 0x29
    170e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a ef       	ldi	r20, 0xFA	; 250
    1716:	54 e4       	ldi	r21, 0x44	; 68
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8b a3       	std	Y+35, r24	; 0x23
    1722:	9c a3       	std	Y+36, r25	; 0x24
    1724:	ad a3       	std	Y+37, r26	; 0x25
    1726:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1728:	6b a1       	ldd	r22, Y+35	; 0x23
    172a:	7c a1       	ldd	r23, Y+36	; 0x24
    172c:	8d a1       	ldd	r24, Y+37	; 0x25
    172e:	9e a1       	ldd	r25, Y+38	; 0x26
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <lcd_send_command+0x180>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9a a3       	std	Y+34, r25	; 0x22
    1746:	89 a3       	std	Y+33, r24	; 0x21
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <lcd_send_command+0x1fe>
	else if (__tmp > 65535)
    174a:	6b a1       	ldd	r22, Y+35	; 0x23
    174c:	7c a1       	ldd	r23, Y+36	; 0x24
    174e:	8d a1       	ldd	r24, Y+37	; 0x25
    1750:	9e a1       	ldd	r25, Y+38	; 0x26
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <lcd_send_command+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6f a1       	ldd	r22, Y+39	; 0x27
    1764:	78 a5       	ldd	r23, Y+40	; 0x28
    1766:	89 a5       	ldd	r24, Y+41	; 0x29
    1768:	9a a5       	ldd	r25, Y+42	; 0x2a
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9a a3       	std	Y+34, r25	; 0x22
    1788:	89 a3       	std	Y+33, r24	; 0x21
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <lcd_send_command+0x1e0>
    178c:	88 ec       	ldi	r24, 0xC8	; 200
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	98 a3       	std	Y+32, r25	; 0x20
    1792:	8f 8f       	std	Y+31, r24	; 0x1f
    1794:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1796:	98 a1       	ldd	r25, Y+32	; 0x20
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <lcd_send_command+0x1ce>
    179c:	98 a3       	std	Y+32, r25	; 0x20
    179e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	89 a1       	ldd	r24, Y+33	; 0x21
    17a2:	9a a1       	ldd	r25, Y+34	; 0x22
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9a a3       	std	Y+34, r25	; 0x22
    17a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	89 a1       	ldd	r24, Y+33	; 0x21
    17ac:	9a a1       	ldd	r25, Y+34	; 0x22
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <lcd_send_command+0x1c2>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <lcd_send_command+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6b a1       	ldd	r22, Y+35	; 0x23
    17b6:	7c a1       	ldd	r23, Y+36	; 0x24
    17b8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ba:	9e a1       	ldd	r25, Y+38	; 0x26
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9a a3       	std	Y+34, r25	; 0x22
    17c6:	89 a3       	std	Y+33, r24	; 0x21
    17c8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ca:	9a a1       	ldd	r25, Y+34	; 0x22
    17cc:	9e 8f       	std	Y+30, r25	; 0x1e
    17ce:	8d 8f       	std	Y+29, r24	; 0x1d
    17d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <lcd_send_command+0x20a>
    17d8:	9e 8f       	std	Y+30, r25	; 0x1e
    17da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((command&0b00001111)<<4);
    17dc:	eb e3       	ldi	r30, 0x3B	; 59
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	89 ad       	ldd	r24, Y+57	; 0x39
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	82 95       	swap	r24
    17e8:	92 95       	swap	r25
    17ea:	90 7f       	andi	r25, 0xF0	; 240
    17ec:	98 27       	eor	r25, r24
    17ee:	80 7f       	andi	r24, 0xF0	; 240
    17f0:	98 27       	eor	r25, r24
    17f2:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    17f4:	a8 e3       	ldi	r26, 0x38	; 56
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e8 e3       	ldi	r30, 0x38	; 56
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	88 60       	ori	r24, 0x08	; 8
    1800:	8c 93       	st	X, r24
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 ea       	ldi	r26, 0xA0	; 160
    1808:	b0 e4       	ldi	r27, 0x40	; 64
    180a:	89 8f       	std	Y+25, r24	; 0x19
    180c:	9a 8f       	std	Y+26, r25	; 0x1a
    180e:	ab 8f       	std	Y+27, r26	; 0x1b
    1810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	69 8d       	ldd	r22, Y+25	; 0x19
    1814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8d 8b       	std	Y+21, r24	; 0x15
    182c:	9e 8b       	std	Y+22, r25	; 0x16
    182e:	af 8b       	std	Y+23, r26	; 0x17
    1830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1832:	6d 89       	ldd	r22, Y+21	; 0x15
    1834:	7e 89       	ldd	r23, Y+22	; 0x16
    1836:	8f 89       	ldd	r24, Y+23	; 0x17
    1838:	98 8d       	ldd	r25, Y+24	; 0x18
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <lcd_send_command+0x28a>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <lcd_send_command+0x308>
	else if (__tmp > 65535)
    1854:	6d 89       	ldd	r22, Y+21	; 0x15
    1856:	7e 89       	ldd	r23, Y+22	; 0x16
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	98 8d       	ldd	r25, Y+24	; 0x18
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <lcd_send_command+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	69 8d       	ldd	r22, Y+25	; 0x19
    186e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <lcd_send_command+0x2ea>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9a 8b       	std	Y+18, r25	; 0x12
    189c:	89 8b       	std	Y+17, r24	; 0x11
    189e:	89 89       	ldd	r24, Y+17	; 0x11
    18a0:	9a 89       	ldd	r25, Y+18	; 0x12
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <lcd_send_command+0x2d8>
    18a6:	9a 8b       	std	Y+18, r25	; 0x12
    18a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9c 8b       	std	Y+20, r25	; 0x14
    18b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8b 89       	ldd	r24, Y+19	; 0x13
    18b6:	9c 89       	ldd	r25, Y+20	; 0x14
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <lcd_send_command+0x2cc>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <lcd_send_command+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6d 89       	ldd	r22, Y+21	; 0x15
    18c0:	7e 89       	ldd	r23, Y+22	; 0x16
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9c 8b       	std	Y+20, r25	; 0x14
    18d0:	8b 8b       	std	Y+19, r24	; 0x13
    18d2:	8b 89       	ldd	r24, Y+19	; 0x13
    18d4:	9c 89       	ldd	r25, Y+20	; 0x14
    18d6:	98 8b       	std	Y+16, r25	; 0x10
    18d8:	8f 87       	std	Y+15, r24	; 0x0f
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <lcd_send_command+0x314>
    18e2:	98 8b       	std	Y+16, r25	; 0x10
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    18e6:	a8 e3       	ldi	r26, 0x38	; 56
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e8 e3       	ldi	r30, 0x38	; 56
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	87 7f       	andi	r24, 0xF7	; 247
    18f2:	8c 93       	st	X, r24
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a0 ea       	ldi	r26, 0xA0	; 160
    18fa:	b0 e4       	ldi	r27, 0x40	; 64
    18fc:	8b 87       	std	Y+11, r24	; 0x0b
    18fe:	9c 87       	std	Y+12, r25	; 0x0c
    1900:	ad 87       	std	Y+13, r26	; 0x0d
    1902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	8d 85       	ldd	r24, Y+13	; 0x0d
    190a:	9e 85       	ldd	r25, Y+14	; 0x0e
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a ef       	ldi	r20, 0xFA	; 250
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8f 83       	std	Y+7, r24	; 0x07
    191e:	98 87       	std	Y+8, r25	; 0x08
    1920:	a9 87       	std	Y+9, r26	; 0x09
    1922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <lcd_send_command+0x37c>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <lcd_send_command+0x3fa>
	else if (__tmp > 65535)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <lcd_send_command+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1960:	7c 85       	ldd	r23, Y+12	; 0x0c
    1962:	8d 85       	ldd	r24, Y+13	; 0x0d
    1964:	9e 85       	ldd	r25, Y+14	; 0x0e
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <lcd_send_command+0x3dc>
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <lcd_send_command+0x3ca>
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	69 f7       	brne	.-38     	; 0x1988 <lcd_send_command+0x3be>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <lcd_send_command+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <lcd_send_command+0x406>
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    19d8:	e9 96       	adiw	r28, 0x39	; 57
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <lcd_write_word>:
*return		   		: void
*purpose       	: printing a full word to the
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <lcd_write_word+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <lcd_write_word+0x8>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    19fa:	1a 82       	std	Y+2, r1	; 0x02
    19fc:	19 82       	std	Y+1, r1	; 0x01
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <lcd_write_word+0x34>
	while(word[i]!='\0')
	{
		lcd_write_character(word[i]);
    1a00:	29 81       	ldd	r18, Y+1	; 0x01
    1a02:	3a 81       	ldd	r19, Y+2	; 0x02
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	fc 01       	movw	r30, r24
    1a0a:	e2 0f       	add	r30, r18
    1a0c:	f3 1f       	adc	r31, r19
    1a0e:	80 81       	ld	r24, Z
    1a10:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <lcd_write_character>
		i++;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	fc 01       	movw	r30, r24
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f3 1f       	adc	r31, r19
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 23       	and	r24, r24
    1a30:	39 f7       	brne	.-50     	; 0x1a00 <lcd_write_word+0x16>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <lcd_write_character>:
*purpose       	: sending one characterto LCD by sending
*				 		 the first nibble first then the second nibble
*						 enabling and disabling the LCD in between
*/
void lcd_write_character(uint8_t character)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	e9 97       	sbiw	r28, 0x39	; 57
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	89 af       	std	Y+57, r24	; 0x39

	DATA_BUS=((character & 0b11110000));
    1a56:	eb e3       	ldi	r30, 0x3B	; 59
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a5c:	80 7f       	andi	r24, 0xF0	; 240
    1a5e:	80 83       	st	Z, r24
	CTL_BUS|=(1<<LCD_RS);
    1a60:	a8 e3       	ldi	r26, 0x38	; 56
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e8 e3       	ldi	r30, 0x38	; 56
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	82 60       	ori	r24, 0x02	; 2
    1a6c:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    1a6e:	a8 e3       	ldi	r26, 0x38	; 56
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e8 e3       	ldi	r30, 0x38	; 56
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	88 60       	ori	r24, 0x08	; 8
    1a7a:	8c 93       	st	X, r24
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 ea       	ldi	r26, 0xA0	; 160
    1a82:	b0 e4       	ldi	r27, 0x40	; 64
    1a84:	8d ab       	std	Y+53, r24	; 0x35
    1a86:	9e ab       	std	Y+54, r25	; 0x36
    1a88:	af ab       	std	Y+55, r26	; 0x37
    1a8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a90:	8f a9       	ldd	r24, Y+55	; 0x37
    1a92:	98 ad       	ldd	r25, Y+56	; 0x38
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	4a ef       	ldi	r20, 0xFA	; 250
    1a9a:	54 e4       	ldi	r21, 0x44	; 68
    1a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	89 ab       	std	Y+49, r24	; 0x31
    1aa6:	9a ab       	std	Y+50, r25	; 0x32
    1aa8:	ab ab       	std	Y+51, r26	; 0x33
    1aaa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aac:	69 a9       	ldd	r22, Y+49	; 0x31
    1aae:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e8       	ldi	r20, 0x80	; 128
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	2c f4       	brge	.+10     	; 0x1ace <lcd_write_character+0x8e>
		__ticks = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	98 ab       	std	Y+48, r25	; 0x30
    1aca:	8f a7       	std	Y+47, r24	; 0x2f
    1acc:	3f c0       	rjmp	.+126    	; 0x1b4c <lcd_write_character+0x10c>
	else if (__tmp > 65535)
    1ace:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	3f ef       	ldi	r19, 0xFF	; 255
    1ada:	4f e7       	ldi	r20, 0x7F	; 127
    1adc:	57 e4       	ldi	r21, 0x47	; 71
    1ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	4c f5       	brge	.+82     	; 0x1b38 <lcd_write_character+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aea:	8f a9       	ldd	r24, Y+55	; 0x37
    1aec:	98 ad       	ldd	r25, Y+56	; 0x38
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e2       	ldi	r20, 0x20	; 32
    1af4:	51 e4       	ldi	r21, 0x41	; 65
    1af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	98 ab       	std	Y+48, r25	; 0x30
    1b0c:	8f a7       	std	Y+47, r24	; 0x2f
    1b0e:	0f c0       	rjmp	.+30     	; 0x1b2e <lcd_write_character+0xee>
    1b10:	88 ec       	ldi	r24, 0xC8	; 200
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9e a7       	std	Y+46, r25	; 0x2e
    1b16:	8d a7       	std	Y+45, r24	; 0x2d
    1b18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <lcd_write_character+0xdc>
    1b20:	9e a7       	std	Y+46, r25	; 0x2e
    1b22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b26:	98 a9       	ldd	r25, Y+48	; 0x30
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	98 ab       	std	Y+48, r25	; 0x30
    1b2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b30:	98 a9       	ldd	r25, Y+48	; 0x30
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	69 f7       	brne	.-38     	; 0x1b10 <lcd_write_character+0xd0>
    1b36:	14 c0       	rjmp	.+40     	; 0x1b60 <lcd_write_character+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b38:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	98 ab       	std	Y+48, r25	; 0x30
    1b4a:	8f a7       	std	Y+47, r24	; 0x2f
    1b4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b50:	9c a7       	std	Y+44, r25	; 0x2c
    1b52:	8b a7       	std	Y+43, r24	; 0x2b
    1b54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <lcd_write_character+0x118>
    1b5c:	9c a7       	std	Y+44, r25	; 0x2c
    1b5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    1b60:	a8 e3       	ldi	r26, 0x38	; 56
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e8 e3       	ldi	r30, 0x38	; 56
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	87 7f       	andi	r24, 0xF7	; 247
    1b6c:	8c 93       	st	X, r24
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 ea       	ldi	r26, 0xA0	; 160
    1b74:	b0 e4       	ldi	r27, 0x40	; 64
    1b76:	8f a3       	std	Y+39, r24	; 0x27
    1b78:	98 a7       	std	Y+40, r25	; 0x28
    1b7a:	a9 a7       	std	Y+41, r26	; 0x29
    1b7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b80:	78 a5       	ldd	r23, Y+40	; 0x28
    1b82:	89 a5       	ldd	r24, Y+41	; 0x29
    1b84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a ef       	ldi	r20, 0xFA	; 250
    1b8c:	54 e4       	ldi	r21, 0x44	; 68
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8b a3       	std	Y+35, r24	; 0x23
    1b98:	9c a3       	std	Y+36, r25	; 0x24
    1b9a:	ad a3       	std	Y+37, r26	; 0x25
    1b9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <lcd_write_character+0x180>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9a a3       	std	Y+34, r25	; 0x22
    1bbc:	89 a3       	std	Y+33, r24	; 0x21
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <lcd_write_character+0x1fe>
	else if (__tmp > 65535)
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <lcd_write_character+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bda:	78 a5       	ldd	r23, Y+40	; 0x28
    1bdc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9a a3       	std	Y+34, r25	; 0x22
    1bfe:	89 a3       	std	Y+33, r24	; 0x21
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <lcd_write_character+0x1e0>
    1c02:	88 ec       	ldi	r24, 0xC8	; 200
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	98 a3       	std	Y+32, r25	; 0x20
    1c08:	8f 8f       	std	Y+31, r24	; 0x1f
    1c0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <lcd_write_character+0x1ce>
    1c12:	98 a3       	std	Y+32, r25	; 0x20
    1c14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	89 a1       	ldd	r24, Y+33	; 0x21
    1c18:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9a a3       	std	Y+34, r25	; 0x22
    1c1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	89 a1       	ldd	r24, Y+33	; 0x21
    1c22:	9a a1       	ldd	r25, Y+34	; 0x22
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <lcd_write_character+0x1c2>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <lcd_write_character+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c30:	9e a1       	ldd	r25, Y+38	; 0x26
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
    1c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c40:	9a a1       	ldd	r25, Y+34	; 0x22
    1c42:	9e 8f       	std	Y+30, r25	; 0x1e
    1c44:	8d 8f       	std	Y+29, r24	; 0x1d
    1c46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <lcd_write_character+0x20a>
    1c4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c50:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((character & 0b00001111)<<4);
    1c52:	eb e3       	ldi	r30, 0x3B	; 59
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	89 ad       	ldd	r24, Y+57	; 0x39
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	82 95       	swap	r24
    1c5e:	92 95       	swap	r25
    1c60:	90 7f       	andi	r25, 0xF0	; 240
    1c62:	98 27       	eor	r25, r24
    1c64:	80 7f       	andi	r24, 0xF0	; 240
    1c66:	98 27       	eor	r25, r24
    1c68:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    1c6a:	a8 e3       	ldi	r26, 0x38	; 56
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e8 e3       	ldi	r30, 0x38	; 56
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	88 60       	ori	r24, 0x08	; 8
    1c76:	8c 93       	st	X, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c7e:	b0 e4       	ldi	r27, 0x40	; 64
    1c80:	89 8f       	std	Y+25, r24	; 0x19
    1c82:	9a 8f       	std	Y+26, r25	; 0x1a
    1c84:	ab 8f       	std	Y+27, r26	; 0x1b
    1c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8d 8b       	std	Y+21, r24	; 0x15
    1ca2:	9e 8b       	std	Y+22, r25	; 0x16
    1ca4:	af 8b       	std	Y+23, r26	; 0x17
    1ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <lcd_write_character+0x28a>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <lcd_write_character+0x308>
	else if (__tmp > 65535)
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <lcd_write_character+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <lcd_write_character+0x2ea>
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9a 8b       	std	Y+18, r25	; 0x12
    1d12:	89 8b       	std	Y+17, r24	; 0x11
    1d14:	89 89       	ldd	r24, Y+17	; 0x11
    1d16:	9a 89       	ldd	r25, Y+18	; 0x12
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <lcd_write_character+0x2d8>
    1d1c:	9a 8b       	std	Y+18, r25	; 0x12
    1d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	9c 89       	ldd	r25, Y+20	; 0x14
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9c 8b       	std	Y+20, r25	; 0x14
    1d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <lcd_write_character+0x2cc>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <lcd_write_character+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6d 89       	ldd	r22, Y+21	; 0x15
    1d36:	7e 89       	ldd	r23, Y+22	; 0x16
    1d38:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	98 8b       	std	Y+16, r25	; 0x10
    1d4e:	8f 87       	std	Y+15, r24	; 0x0f
    1d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d52:	98 89       	ldd	r25, Y+16	; 0x10
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <lcd_write_character+0x314>
    1d58:	98 8b       	std	Y+16, r25	; 0x10
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    1d5c:	a8 e3       	ldi	r26, 0x38	; 56
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e8 e3       	ldi	r30, 0x38	; 56
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	87 7f       	andi	r24, 0xF7	; 247
    1d68:	8c 93       	st	X, r24
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d70:	b0 e4       	ldi	r27, 0x40	; 64
    1d72:	8b 87       	std	Y+11, r24	; 0x0b
    1d74:	9c 87       	std	Y+12, r25	; 0x0c
    1d76:	ad 87       	std	Y+13, r26	; 0x0d
    1d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8f 83       	std	Y+7, r24	; 0x07
    1d94:	98 87       	std	Y+8, r25	; 0x08
    1d96:	a9 87       	std	Y+9, r26	; 0x09
    1d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <lcd_write_character+0x37c>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <lcd_write_character+0x3fa>
	else if (__tmp > 65535)
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <lcd_write_character+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <lcd_write_character+0x3dc>
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <lcd_write_character+0x3ca>
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <lcd_write_character+0x3be>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <lcd_write_character+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <lcd_write_character+0x406>
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1e4e:	e9 96       	adiw	r28, 0x39	; 57
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <lcd_clear>:
*return		   		: void
*purpose       	: Clearing the lcd screen by sending
*				 	the LCD_CMD_CLEAR_DISPLAY command to LCD
*/
void lcd_clear(void)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	2e 97       	sbiw	r28, 0x0e	; 14
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <lcd_send_command>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 ea       	ldi	r26, 0xA0	; 160
    1e80:	b0 e4       	ldi	r27, 0x40	; 64
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <lcd_clear+0x6c>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <lcd_clear+0xea>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <lcd_clear+0xcc>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <lcd_clear+0xba>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <lcd_clear+0xae>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <lcd_clear+0xf6>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1f5e:	2e 96       	adiw	r28, 0x0e	; 14
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <lcd_goto_xy>:
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	6a 97       	sbiw	r28, 0x1a	; 26
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	89 8f       	std	Y+25, r24	; 0x19
    1f86:	6a 8f       	std	Y+26, r22	; 0x1a
	lcd_send_command((0x80|(line<<6))+pos);
    1f88:	89 8d       	ldd	r24, Y+25	; 0x19
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	00 24       	eor	r0, r0
    1f90:	96 95       	lsr	r25
    1f92:	87 95       	ror	r24
    1f94:	07 94       	ror	r0
    1f96:	96 95       	lsr	r25
    1f98:	87 95       	ror	r24
    1f9a:	07 94       	ror	r0
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	80 2d       	mov	r24, r0
    1fa0:	80 68       	ori	r24, 0x80	; 128
    1fa2:	98 2f       	mov	r25, r24
    1fa4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fa6:	89 0f       	add	r24, r25
    1fa8:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <lcd_send_command>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a8 e4       	ldi	r26, 0x48	; 72
    1fb2:	b2 e4       	ldi	r27, 0x42	; 66
    1fb4:	8d 8b       	std	Y+21, r24	; 0x15
    1fb6:	9e 8b       	std	Y+22, r25	; 0x16
    1fb8:	af 8b       	std	Y+23, r26	; 0x17
    1fba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	2b ea       	ldi	r18, 0xAB	; 171
    1fc6:	3a ea       	ldi	r19, 0xAA	; 170
    1fc8:	4a e2       	ldi	r20, 0x2A	; 42
    1fca:	50 e4       	ldi	r21, 0x40	; 64
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	89 8b       	std	Y+17, r24	; 0x11
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	ab 8b       	std	Y+19, r26	; 0x13
    1fda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fdc:	69 89       	ldd	r22, Y+17	; 0x11
    1fde:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	1c f4       	brge	.+6      	; 0x1ffa <lcd_goto_xy+0x8a>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	88 8b       	std	Y+16, r24	; 0x10
    1ff8:	91 c0       	rjmp	.+290    	; 0x211c <lcd_goto_xy+0x1ac>
	else if (__tmp > 255)
    1ffa:	69 89       	ldd	r22, Y+17	; 0x11
    1ffc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	0c f0       	brlt	.+2      	; 0x2014 <lcd_goto_xy+0xa4>
    2012:	7b c0       	rjmp	.+246    	; 0x210a <lcd_goto_xy+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8c 87       	std	Y+12, r24	; 0x0c
    202e:	9d 87       	std	Y+13, r25	; 0x0d
    2030:	ae 87       	std	Y+14, r26	; 0x0e
    2032:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6c 85       	ldd	r22, Y+12	; 0x0c
    2036:	7d 85       	ldd	r23, Y+13	; 0x0d
    2038:	8e 85       	ldd	r24, Y+14	; 0x0e
    203a:	9f 85       	ldd	r25, Y+15	; 0x0f
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a ef       	ldi	r20, 0xFA	; 250
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	88 87       	std	Y+8, r24	; 0x08
    204e:	99 87       	std	Y+9, r25	; 0x09
    2050:	aa 87       	std	Y+10, r26	; 0x0a
    2052:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2054:	68 85       	ldd	r22, Y+8	; 0x08
    2056:	79 85       	ldd	r23, Y+9	; 0x09
    2058:	8a 85       	ldd	r24, Y+10	; 0x0a
    205a:	9b 85       	ldd	r25, Y+11	; 0x0b
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <lcd_goto_xy+0x106>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9f 83       	std	Y+7, r25	; 0x07
    2072:	8e 83       	std	Y+6, r24	; 0x06
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <lcd_goto_xy+0x184>
	else if (__tmp > 65535)
    2076:	68 85       	ldd	r22, Y+8	; 0x08
    2078:	79 85       	ldd	r23, Y+9	; 0x09
    207a:	8a 85       	ldd	r24, Y+10	; 0x0a
    207c:	9b 85       	ldd	r25, Y+11	; 0x0b
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <lcd_goto_xy+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2090:	7d 85       	ldd	r23, Y+13	; 0x0d
    2092:	8e 85       	ldd	r24, Y+14	; 0x0e
    2094:	9f 85       	ldd	r25, Y+15	; 0x0f
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9f 83       	std	Y+7, r25	; 0x07
    20b4:	8e 83       	std	Y+6, r24	; 0x06
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <lcd_goto_xy+0x166>
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9d 83       	std	Y+5, r25	; 0x05
    20be:	8c 83       	std	Y+4, r24	; 0x04
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	9d 81       	ldd	r25, Y+5	; 0x05
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <lcd_goto_xy+0x154>
    20c8:	9d 83       	std	Y+5, r25	; 0x05
    20ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	9f 81       	ldd	r25, Y+7	; 0x07
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9f 83       	std	Y+7, r25	; 0x07
    20d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8e 81       	ldd	r24, Y+6	; 0x06
    20d8:	9f 81       	ldd	r25, Y+7	; 0x07
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <lcd_goto_xy+0x148>
    20de:	24 c0       	rjmp	.+72     	; 0x2128 <lcd_goto_xy+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	68 85       	ldd	r22, Y+8	; 0x08
    20e2:	79 85       	ldd	r23, Y+9	; 0x09
    20e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9f 83       	std	Y+7, r25	; 0x07
    20f2:	8e 83       	std	Y+6, r24	; 0x06
    20f4:	8e 81       	ldd	r24, Y+6	; 0x06
    20f6:	9f 81       	ldd	r25, Y+7	; 0x07
    20f8:	9b 83       	std	Y+3, r25	; 0x03
    20fa:	8a 83       	std	Y+2, r24	; 0x02
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <lcd_goto_xy+0x190>
    2104:	9b 83       	std	Y+3, r25	; 0x03
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <lcd_goto_xy+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210a:	69 89       	ldd	r22, Y+17	; 0x11
    210c:	7a 89       	ldd	r23, Y+18	; 0x12
    210e:	8b 89       	ldd	r24, Y+19	; 0x13
    2110:	9c 89       	ldd	r25, Y+20	; 0x14
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	88 8b       	std	Y+16, r24	; 0x10
    211c:	88 89       	ldd	r24, Y+16	; 0x10
    211e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	8a 95       	dec	r24
    2124:	f1 f7       	brne	.-4      	; 0x2122 <lcd_goto_xy+0x1b2>
    2126:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (50);
}
    2128:	6a 96       	adiw	r28, 0x1a	; 26
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <main>:

#include<avr/io.h>
#include  "LCD/LCD.h"
#include  "ult_sen/ultrasonic.h"
#include "Timers/TIMER.h"
int main(){
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	6c 97       	sbiw	r28, 0x1c	; 28
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61

lcd_init();
    214e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <lcd_init>
ultrasonic_init();
    2152:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ultrasonic_init>
timer0_init();
    2156:	0e 94 cc 08 	call	0x1198	; 0x1198 <timer0_init>
sei();
    215a:	78 94       	sei

lcd_write_word("Distance is ");
    215c:	83 e6       	ldi	r24, 0x63	; 99
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <lcd_write_word>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e2       	ldi	r26, 0x20	; 32
    216a:	b1 e4       	ldi	r27, 0x41	; 65
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9a 8f       	std	Y+26, r25	; 0x1a
    2170:	ab 8f       	std	Y+27, r26	; 0x1b
    2172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a ef       	ldi	r20, 0xFA	; 250
    2182:	54 e4       	ldi	r21, 0x44	; 68
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8d 8b       	std	Y+21, r24	; 0x15
    218e:	9e 8b       	std	Y+22, r25	; 0x16
    2190:	af 8b       	std	Y+23, r26	; 0x17
    2192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <main+0x7c>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <main+0xfa>
	else if (__tmp > 65535)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <main+0xdc>
    21f8:	88 ec       	ldi	r24, 0xC8	; 200
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	9a 89       	ldd	r25, Y+18	; 0x12
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <main+0xca>
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <main+0xbe>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <main+0x106>
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(10);
while(1){
  ultra_triger();
    2248:	0e 94 84 06 	call	0xd08	; 0xd08 <ultra_triger>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e7       	ldi	r26, 0x70	; 112
    2252:	b1 e4       	ldi	r27, 0x41	; 65
    2254:	8b 87       	std	Y+11, r24	; 0x0b
    2256:	9c 87       	std	Y+12, r25	; 0x0c
    2258:	ad 87       	std	Y+13, r26	; 0x0d
    225a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225c:	6b 85       	ldd	r22, Y+11	; 0x0b
    225e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2260:	8d 85       	ldd	r24, Y+13	; 0x0d
    2262:	9e 85       	ldd	r25, Y+14	; 0x0e
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a ef       	ldi	r20, 0xFA	; 250
    226a:	54 e4       	ldi	r21, 0x44	; 68
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8f 83       	std	Y+7, r24	; 0x07
    2276:	98 87       	std	Y+8, r25	; 0x08
    2278:	a9 87       	std	Y+9, r26	; 0x09
    227a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2290:	88 23       	and	r24, r24
    2292:	2c f4       	brge	.+10     	; 0x229e <main+0x164>
		__ticks = 1;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	3f c0       	rjmp	.+126    	; 0x231c <main+0x1e2>
	else if (__tmp > 65535)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	4c f5       	brge	.+82     	; 0x2308 <main+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <main+0x1c4>
    22e0:	88 ec       	ldi	r24, 0xC8	; 200
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 83       	std	Y+4, r25	; 0x04
    22e6:	8b 83       	std	Y+3, r24	; 0x03
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <main+0x1b2>
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	69 f7       	brne	.-38     	; 0x22e0 <main+0x1a6>
    2306:	a0 cf       	rjmp	.-192    	; 0x2248 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <main+0x1ee>
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	8b cf       	rjmp	.-234    	; 0x2248 <main+0x10e>

00002332 <__udivmodsi4>:
    2332:	a1 e2       	ldi	r26, 0x21	; 33
    2334:	1a 2e       	mov	r1, r26
    2336:	aa 1b       	sub	r26, r26
    2338:	bb 1b       	sub	r27, r27
    233a:	fd 01       	movw	r30, r26
    233c:	0d c0       	rjmp	.+26     	; 0x2358 <__udivmodsi4_ep>

0000233e <__udivmodsi4_loop>:
    233e:	aa 1f       	adc	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	ee 1f       	adc	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	a2 17       	cp	r26, r18
    2348:	b3 07       	cpc	r27, r19
    234a:	e4 07       	cpc	r30, r20
    234c:	f5 07       	cpc	r31, r21
    234e:	20 f0       	brcs	.+8      	; 0x2358 <__udivmodsi4_ep>
    2350:	a2 1b       	sub	r26, r18
    2352:	b3 0b       	sbc	r27, r19
    2354:	e4 0b       	sbc	r30, r20
    2356:	f5 0b       	sbc	r31, r21

00002358 <__udivmodsi4_ep>:
    2358:	66 1f       	adc	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	1a 94       	dec	r1
    2362:	69 f7       	brne	.-38     	; 0x233e <__udivmodsi4_loop>
    2364:	60 95       	com	r22
    2366:	70 95       	com	r23
    2368:	80 95       	com	r24
    236a:	90 95       	com	r25
    236c:	9b 01       	movw	r18, r22
    236e:	ac 01       	movw	r20, r24
    2370:	bd 01       	movw	r22, r26
    2372:	cf 01       	movw	r24, r30
    2374:	08 95       	ret

00002376 <__prologue_saves__>:
    2376:	2f 92       	push	r2
    2378:	3f 92       	push	r3
    237a:	4f 92       	push	r4
    237c:	5f 92       	push	r5
    237e:	6f 92       	push	r6
    2380:	7f 92       	push	r7
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	af 92       	push	r10
    2388:	bf 92       	push	r11
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ca 1b       	sub	r28, r26
    23a0:	db 0b       	sbc	r29, r27
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	09 94       	ijmp

000023ae <__epilogue_restores__>:
    23ae:	2a 88       	ldd	r2, Y+18	; 0x12
    23b0:	39 88       	ldd	r3, Y+17	; 0x11
    23b2:	48 88       	ldd	r4, Y+16	; 0x10
    23b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    23bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23be:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c0:	b9 84       	ldd	r11, Y+9	; 0x09
    23c2:	c8 84       	ldd	r12, Y+8	; 0x08
    23c4:	df 80       	ldd	r13, Y+7	; 0x07
    23c6:	ee 80       	ldd	r14, Y+6	; 0x06
    23c8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ca:	0c 81       	ldd	r16, Y+4	; 0x04
    23cc:	1b 81       	ldd	r17, Y+3	; 0x03
    23ce:	aa 81       	ldd	r26, Y+2	; 0x02
    23d0:	b9 81       	ldd	r27, Y+1	; 0x01
    23d2:	ce 0f       	add	r28, r30
    23d4:	d1 1d       	adc	r29, r1
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	ed 01       	movw	r28, r26
    23e2:	08 95       	ret

000023e4 <memcpy>:
    23e4:	fb 01       	movw	r30, r22
    23e6:	dc 01       	movw	r26, r24
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <memcpy+0xa>
    23ea:	01 90       	ld	r0, Z+
    23ec:	0d 92       	st	X+, r0
    23ee:	41 50       	subi	r20, 0x01	; 1
    23f0:	50 40       	sbci	r21, 0x00	; 0
    23f2:	d8 f7       	brcc	.-10     	; 0x23ea <memcpy+0x6>
    23f4:	08 95       	ret

000023f6 <strlen>:
    23f6:	fc 01       	movw	r30, r24
    23f8:	01 90       	ld	r0, Z+
    23fa:	00 20       	and	r0, r0
    23fc:	e9 f7       	brne	.-6      	; 0x23f8 <strlen+0x2>
    23fe:	80 95       	com	r24
    2400:	90 95       	com	r25
    2402:	8e 0f       	add	r24, r30
    2404:	9f 1f       	adc	r25, r31
    2406:	08 95       	ret

00002408 <itoa>:
    2408:	fb 01       	movw	r30, r22
    240a:	9f 01       	movw	r18, r30
    240c:	e8 94       	clt
    240e:	42 30       	cpi	r20, 0x02	; 2
    2410:	c4 f0       	brlt	.+48     	; 0x2442 <itoa+0x3a>
    2412:	45 32       	cpi	r20, 0x25	; 37
    2414:	b4 f4       	brge	.+44     	; 0x2442 <itoa+0x3a>
    2416:	4a 30       	cpi	r20, 0x0A	; 10
    2418:	29 f4       	brne	.+10     	; 0x2424 <itoa+0x1c>
    241a:	97 fb       	bst	r25, 7
    241c:	1e f4       	brtc	.+6      	; 0x2424 <itoa+0x1c>
    241e:	90 95       	com	r25
    2420:	81 95       	neg	r24
    2422:	9f 4f       	sbci	r25, 0xFF	; 255
    2424:	64 2f       	mov	r22, r20
    2426:	77 27       	eor	r23, r23
    2428:	0e 94 35 12 	call	0x246a	; 0x246a <__udivmodhi4>
    242c:	80 5d       	subi	r24, 0xD0	; 208
    242e:	8a 33       	cpi	r24, 0x3A	; 58
    2430:	0c f0       	brlt	.+2      	; 0x2434 <itoa+0x2c>
    2432:	89 5d       	subi	r24, 0xD9	; 217
    2434:	81 93       	st	Z+, r24
    2436:	cb 01       	movw	r24, r22
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	a1 f7       	brne	.-24     	; 0x2424 <itoa+0x1c>
    243c:	16 f4       	brtc	.+4      	; 0x2442 <itoa+0x3a>
    243e:	5d e2       	ldi	r21, 0x2D	; 45
    2440:	51 93       	st	Z+, r21
    2442:	10 82       	st	Z, r1
    2444:	c9 01       	movw	r24, r18
    2446:	0c 94 25 12 	jmp	0x244a	; 0x244a <strrev>

0000244a <strrev>:
    244a:	dc 01       	movw	r26, r24
    244c:	fc 01       	movw	r30, r24
    244e:	67 2f       	mov	r22, r23
    2450:	71 91       	ld	r23, Z+
    2452:	77 23       	and	r23, r23
    2454:	e1 f7       	brne	.-8      	; 0x244e <strrev+0x4>
    2456:	32 97       	sbiw	r30, 0x02	; 2
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <strrev+0x18>
    245a:	7c 91       	ld	r23, X
    245c:	6d 93       	st	X+, r22
    245e:	70 83       	st	Z, r23
    2460:	62 91       	ld	r22, -Z
    2462:	ae 17       	cp	r26, r30
    2464:	bf 07       	cpc	r27, r31
    2466:	c8 f3       	brcs	.-14     	; 0x245a <strrev+0x10>
    2468:	08 95       	ret

0000246a <__udivmodhi4>:
    246a:	aa 1b       	sub	r26, r26
    246c:	bb 1b       	sub	r27, r27
    246e:	51 e1       	ldi	r21, 0x11	; 17
    2470:	07 c0       	rjmp	.+14     	; 0x2480 <__udivmodhi4_ep>

00002472 <__udivmodhi4_loop>:
    2472:	aa 1f       	adc	r26, r26
    2474:	bb 1f       	adc	r27, r27
    2476:	a6 17       	cp	r26, r22
    2478:	b7 07       	cpc	r27, r23
    247a:	10 f0       	brcs	.+4      	; 0x2480 <__udivmodhi4_ep>
    247c:	a6 1b       	sub	r26, r22
    247e:	b7 0b       	sbc	r27, r23

00002480 <__udivmodhi4_ep>:
    2480:	88 1f       	adc	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	5a 95       	dec	r21
    2486:	a9 f7       	brne	.-22     	; 0x2472 <__udivmodhi4_loop>
    2488:	80 95       	com	r24
    248a:	90 95       	com	r25
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	08 95       	ret

00002492 <_exit>:
    2492:	f8 94       	cli

00002494 <__stop_program>:
    2494:	ff cf       	rjmp	.-2      	; 0x2494 <__stop_program>
